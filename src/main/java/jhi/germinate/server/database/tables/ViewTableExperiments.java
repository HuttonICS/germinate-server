/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import java.sql.Date;
import java.sql.Timestamp;

import javax.annotation.Generated;

import jhi.germinate.server.database.GerminateTemplate_4_0_0;
import jhi.germinate.server.database.tables.records.ViewTableExperimentsRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableExperiments extends TableImpl<ViewTableExperimentsRecord> {

    private static final long serialVersionUID = -2138618778;

    /**
     * The reference instance of <code>germinate_template_4_0_0.view_table_experiments</code>
     */
    public static final ViewTableExperiments VIEW_TABLE_EXPERIMENTS = new ViewTableExperiments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTableExperimentsRecord> getRecordType() {
        return ViewTableExperimentsRecord.class;
    }

    /**
     * The column <code>germinate_template_4_0_0.view_table_experiments.experiment_id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTableExperimentsRecord, Integer> EXPERIMENT_ID = createField("experiment_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_template_4_0_0.view_table_experiments.experiment_name</code>. The name of the experiment.
     */
    public final TableField<ViewTableExperimentsRecord, String> EXPERIMENT_NAME = createField("experiment_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "The name of the experiment.");

    /**
     * The column <code>germinate_template_4_0_0.view_table_experiments.experiment_description</code>. Describes the experiment.
     */
    public final TableField<ViewTableExperimentsRecord, String> EXPERIMENT_DESCRIPTION = createField("experiment_description", org.jooq.impl.SQLDataType.CLOB, this, "Describes the experiment.");

    /**
     * The column <code>germinate_template_4_0_0.view_table_experiments.experiment_date</code>. The date that the experiment was carried out.
     */
    public final TableField<ViewTableExperimentsRecord, Date> EXPERIMENT_DATE = createField("experiment_date", org.jooq.impl.SQLDataType.DATE, this, "The date that the experiment was carried out.");

    /**
     * The column <code>germinate_template_4_0_0.view_table_experiments.experimenttype_description</code>. Describes the experiment type.
     */
    public final TableField<ViewTableExperimentsRecord, String> EXPERIMENTTYPE_DESCRIPTION = createField("experimenttype_description", org.jooq.impl.SQLDataType.VARCHAR(255), this, "Describes the experiment type.");

    /**
     * The column <code>germinate_template_4_0_0.view_table_experiments.created_on</code>. When the record was created.
     */
    public final TableField<ViewTableExperimentsRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP, this, "When the record was created.");

    /**
     * Create a <code>germinate_template_4_0_0.view_table_experiments</code> table reference
     */
    public ViewTableExperiments() {
        this(DSL.name("view_table_experiments"), null);
    }

    /**
     * Create an aliased <code>germinate_template_4_0_0.view_table_experiments</code> table reference
     */
    public ViewTableExperiments(String alias) {
        this(DSL.name(alias), VIEW_TABLE_EXPERIMENTS);
    }

    /**
     * Create an aliased <code>germinate_template_4_0_0.view_table_experiments</code> table reference
     */
    public ViewTableExperiments(Name alias) {
        this(alias, VIEW_TABLE_EXPERIMENTS);
    }

    private ViewTableExperiments(Name alias, Table<ViewTableExperimentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTableExperiments(Name alias, Table<ViewTableExperimentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_4_0_0.GERMINATE_TEMPLATE_4_0_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableExperiments as(String alias) {
        return new ViewTableExperiments(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableExperiments as(Name alias) {
        return new ViewTableExperiments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableExperiments rename(String name) {
        return new ViewTableExperiments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableExperiments rename(Name name) {
        return new ViewTableExperiments(name, null);
    }
// @formatter:on
}
