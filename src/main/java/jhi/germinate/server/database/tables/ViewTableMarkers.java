/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import com.google.gson.JsonArray;

import java.sql.Timestamp;

import javax.annotation.Generated;

import jhi.germinate.server.database.GerminateTemplate_4_0_0;
import jhi.germinate.server.database.tables.records.ViewTableMarkersRecord;
import jhi.germinate.server.util.SynonymBinding;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableMarkers extends TableImpl<ViewTableMarkersRecord> {

    private static final long serialVersionUID = 1827762785;

    /**
     * The reference instance of <code>germinate_template_4_0_0.view_table_markers</code>
     */
    public static final ViewTableMarkers VIEW_TABLE_MARKERS = new ViewTableMarkers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTableMarkersRecord> getRecordType() {
        return ViewTableMarkersRecord.class;
    }

    /**
     * The column <code>germinate_template_4_0_0.view_table_markers.marker_id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTableMarkersRecord, Integer> MARKER_ID = createField("marker_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_template_4_0_0.view_table_markers.marker_name</code>. The name of the marker. This should be a unique name which identifies the marker.
     */
    public final TableField<ViewTableMarkersRecord, String> MARKER_NAME = createField("marker_name", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "The name of the marker. This should be a unique name which identifies the marker.");

    /**
     * The column <code>germinate_template_4_0_0.view_table_markers.marker_type</code>. Describes the marker type. Markers (markers) have a defined type. This could be AFLP, MicroSat, SNP and so on.
     */
    public final TableField<ViewTableMarkersRecord, String> MARKER_TYPE = createField("marker_type", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "Describes the marker type. Markers (markers) have a defined type. This could be AFLP, MicroSat, SNP and so on.");

    /**
     * The column <code>germinate_template_4_0_0.view_table_markers.marker_synonyms</code>. The synonyms as a json array.
     */
    public final TableField<ViewTableMarkersRecord, JsonArray> MARKER_SYNONYMS = createField("marker_synonyms", org.jooq.impl.DefaultDataType.getDefaultDataType("\"germinate_template_4_0_0\".\"view_table_markers_marker_synonyms\""), this, "The synonyms as a json array.", new SynonymBinding());

    /**
     * The column <code>germinate_template_4_0_0.view_table_markers.created_on</code>. When the record was created.

     */
    public final TableField<ViewTableMarkersRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP, this, "When the record was created.\n");

    /**
     * The column <code>germinate_template_4_0_0.view_table_markers.updated_on</code>. When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.
     */
    public final TableField<ViewTableMarkersRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP, this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * Create a <code>germinate_template_4_0_0.view_table_markers</code> table reference
     */
    public ViewTableMarkers() {
        this(DSL.name("view_table_markers"), null);
    }

    /**
     * Create an aliased <code>germinate_template_4_0_0.view_table_markers</code> table reference
     */
    public ViewTableMarkers(String alias) {
        this(DSL.name(alias), VIEW_TABLE_MARKERS);
    }

    /**
     * Create an aliased <code>germinate_template_4_0_0.view_table_markers</code> table reference
     */
    public ViewTableMarkers(Name alias) {
        this(alias, VIEW_TABLE_MARKERS);
    }

    private ViewTableMarkers(Name alias, Table<ViewTableMarkersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTableMarkers(Name alias, Table<ViewTableMarkersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_4_0_0.GERMINATE_TEMPLATE_4_0_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMarkers as(String alias) {
        return new ViewTableMarkers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMarkers as(Name alias) {
        return new ViewTableMarkers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableMarkers rename(String name) {
        return new ViewTableMarkers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableMarkers rename(Name name) {
        return new ViewTableMarkers(name, null);
    }
// @formatter:on
}
