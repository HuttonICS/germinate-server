/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jhi.germinate.server.database.GerminateTemplate_4_20_06_15;
import jhi.germinate.server.database.tables.records.ClimatedataRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * Holds montly average climate data such as rainfall, temperature or cloud 
 * cover. This is based on locations rather than accessions like most of the 
 * other tables in Germinate.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Climatedata extends TableImpl<ClimatedataRecord> {

    private static final long serialVersionUID = -445663374;

    /**
     * The reference instance of <code>germinate_template_4_20_06_15.climatedata</code>
     */
    public static final Climatedata CLIMATEDATA = new Climatedata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClimatedataRecord> getRecordType() {
        return ClimatedataRecord.class;
    }

    /**
     * The column <code>germinate_template_4_20_06_15.climatedata.id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ClimatedataRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_template_4_20_06_15.climatedata.climate_id</code>. Foreign key to climates (climates.id).
     */
    public final TableField<ClimatedataRecord, Integer> CLIMATE_ID = createField("climate_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "Foreign key to climates (climates.id).");

    /**
     * The column <code>germinate_template_4_20_06_15.climatedata.location_id</code>. Foreign key to locations (locations.id).
     */
    public final TableField<ClimatedataRecord, Integer> LOCATION_ID = createField("location_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "Foreign key to locations (locations.id).");

    /**
     * The column <code>germinate_template_4_20_06_15.climatedata.climate_value</code>. Value for the specific climate attribute. These are monthly averages and not daily. Monthly data is required for the current Germinate climate viisualizations and interface.
     */
    public final TableField<ClimatedataRecord, Double> CLIMATE_VALUE = createField("climate_value", org.jooq.impl.SQLDataType.DOUBLE, this, "Value for the specific climate attribute. These are monthly averages and not daily. Monthly data is required for the current Germinate climate viisualizations and interface.");

    /**
     * The column <code>germinate_template_4_20_06_15.climatedata.dataset_id</code>. Foreign key to datasets (datasets.id).
     */
    public final TableField<ClimatedataRecord, Integer> DATASET_ID = createField("dataset_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Foreign key to datasets (datasets.id).");

    /**
     * The column <code>germinate_template_4_20_06_15.climatedata.recording_date</code>. The date at which this data point was recorded.
     */
    public final TableField<ClimatedataRecord, Timestamp> RECORDING_DATE = createField("recording_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "The date at which this data point was recorded.");

    /**
     * The column <code>germinate_template_4_20_06_15.climatedata.old_recording_date</code>. The month that the data was recorded. This uses an integer to represent the month (1-12).
     */
    public final TableField<ClimatedataRecord, String> OLD_RECORDING_DATE = createField("old_recording_date", org.jooq.impl.SQLDataType.VARCHAR(32), this, "The month that the data was recorded. This uses an integer to represent the month (1-12).");

    /**
     * The column <code>germinate_template_4_20_06_15.climatedata.created_on</code>. When the record was created.
     */
    public final TableField<ClimatedataRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_template_4_20_06_15.climatedata.updated_on</code>. When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.
     */
    public final TableField<ClimatedataRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * Create a <code>germinate_template_4_20_06_15.climatedata</code> table reference
     */
    public Climatedata() {
        this(DSL.name("climatedata"), null);
    }

    /**
     * Create an aliased <code>germinate_template_4_20_06_15.climatedata</code> table reference
     */
    public Climatedata(String alias) {
        this(DSL.name(alias), CLIMATEDATA);
    }

    /**
     * Create an aliased <code>germinate_template_4_20_06_15.climatedata</code> table reference
     */
    public Climatedata(Name alias) {
        this(alias, CLIMATEDATA);
    }

    private Climatedata(Name alias, Table<ClimatedataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Climatedata(Name alias, Table<ClimatedataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Holds montly average climate data such as rainfall, temperature or cloud cover. This is based on locations rather than accessions like most of the other tables in Germinate."));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_4_20_06_15.GERMINATE_TEMPLATE_4_20_06_15;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClimatedataRecord, Integer> getIdentity() {
        return Internal.createIdentity(jhi.germinate.server.database.tables.Climatedata.CLIMATEDATA, jhi.germinate.server.database.tables.Climatedata.CLIMATEDATA.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClimatedataRecord> getPrimaryKey() {
        return Internal.createUniqueKey(jhi.germinate.server.database.tables.Climatedata.CLIMATEDATA, "KEY_climatedata_PRIMARY", jhi.germinate.server.database.tables.Climatedata.CLIMATEDATA.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClimatedataRecord>> getKeys() {
        return Arrays.<UniqueKey<ClimatedataRecord>>asList(
              Internal.createUniqueKey(jhi.germinate.server.database.tables.Climatedata.CLIMATEDATA, "KEY_climatedata_PRIMARY", jhi.germinate.server.database.tables.Climatedata.CLIMATEDATA.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Climatedata as(String alias) {
        return new Climatedata(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Climatedata as(Name alias) {
        return new Climatedata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Climatedata rename(String name) {
        return new Climatedata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Climatedata rename(Name name) {
        return new Climatedata(name, null);
    }
// @formatter:on
}
