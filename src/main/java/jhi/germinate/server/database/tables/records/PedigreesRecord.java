/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import jhi.germinate.server.database.enums.PedigreesRelationshipType;
import jhi.germinate.server.database.tables.Pedigrees;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


// @formatter:off
/**
 * Holds pedigree definitions. A pedigree is constructed from a series of 
 * individial-&gt;parent records. This gives a great deal of flexibility in 
 * how pedigree networks can be constructed. This table is required for operation 
 * with the Helium pedigree viewer.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PedigreesRecord extends UpdatableRecordImpl<PedigreesRecord> implements Record8<Integer, Integer, Integer, PedigreesRelationshipType, Integer, String, Timestamp, Timestamp> {

    private static final long serialVersionUID = -1085030895;

    /**
     * Setter for <code>germinate_template_4_20_06_15.pedigrees.id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>germinate_template_4_20_06_15.pedigrees.id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>germinate_template_4_20_06_15.pedigrees.germinatebase_id</code>. Foreign key germinatebase (germinatebase.id).
     */
    public void setGerminatebaseId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_template_4_20_06_15.pedigrees.germinatebase_id</code>. Foreign key germinatebase (germinatebase.id).
     */
    public Integer getGerminatebaseId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>germinate_template_4_20_06_15.pedigrees.parent_id</code>. Foreign key germinatebase (germinatebase.id). This is the parrent of the individual identified in the germinatebase_id column.
     */
    public void setParentId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_template_4_20_06_15.pedigrees.parent_id</code>. Foreign key germinatebase (germinatebase.id). This is the parrent of the individual identified in the germinatebase_id column.
     */
    public Integer getParentId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>germinate_template_4_20_06_15.pedigrees.relationship_type</code>. Male or Female parent. Should be recorded as 'M' (male) or 'F' (female).
     */
    public void setRelationshipType(PedigreesRelationshipType value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_template_4_20_06_15.pedigrees.relationship_type</code>. Male or Female parent. Should be recorded as 'M' (male) or 'F' (female).
     */
    public PedigreesRelationshipType getRelationshipType() {
        return (PedigreesRelationshipType) get(3);
    }

    /**
     * Setter for <code>germinate_template_4_20_06_15.pedigrees.pedigreedescription_id</code>. Foreign key pedigreedescriptions (pedigreedescriptions.id).
     */
    public void setPedigreedescriptionId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_template_4_20_06_15.pedigrees.pedigreedescription_id</code>. Foreign key pedigreedescriptions (pedigreedescriptions.id).
     */
    public Integer getPedigreedescriptionId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>germinate_template_4_20_06_15.pedigrees.relationship_description</code>. Can be used as a meta-data field to describe the relationships if a complex rellationship is required. Examples may include, 'is a complex cross containing', 'F4 generation' and so on. This is used by the Helium pedigree visualiztion tool.
     */
    public void setRelationshipDescription(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>germinate_template_4_20_06_15.pedigrees.relationship_description</code>. Can be used as a meta-data field to describe the relationships if a complex rellationship is required. Examples may include, 'is a complex cross containing', 'F4 generation' and so on. This is used by the Helium pedigree visualiztion tool.
     */
    public String getRelationshipDescription() {
        return (String) get(5);
    }

    /**
     * Setter for <code>germinate_template_4_20_06_15.pedigrees.created_on</code>. When the record was created.
     */
    public void setCreatedOn(Timestamp value) {
        set(6, value);
    }

    /**
     * Getter for <code>germinate_template_4_20_06_15.pedigrees.created_on</code>. When the record was created.
     */
    public Timestamp getCreatedOn() {
        return (Timestamp) get(6);
    }

    /**
     * Setter for <code>germinate_template_4_20_06_15.pedigrees.updated_on</code>. When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.
     */
    public void setUpdatedOn(Timestamp value) {
        set(7, value);
    }

    /**
     * Getter for <code>germinate_template_4_20_06_15.pedigrees.updated_on</code>. When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.
     */
    public Timestamp getUpdatedOn() {
        return (Timestamp) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<Integer, Integer, Integer, PedigreesRelationshipType, Integer, String, Timestamp, Timestamp> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row8<Integer, Integer, Integer, PedigreesRelationshipType, Integer, String, Timestamp, Timestamp> valuesRow() {
        return (Row8) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Pedigrees.PEDIGREES.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Pedigrees.PEDIGREES.GERMINATEBASE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Pedigrees.PEDIGREES.PARENT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<PedigreesRelationshipType> field4() {
        return Pedigrees.PEDIGREES.RELATIONSHIP_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return Pedigrees.PEDIGREES.PEDIGREEDESCRIPTION_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Pedigrees.PEDIGREES.RELATIONSHIP_DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field7() {
        return Pedigrees.PEDIGREES.CREATED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field8() {
        return Pedigrees.PEDIGREES.UPDATED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getGerminatebaseId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getParentId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PedigreesRelationshipType component4() {
        return getRelationshipType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component5() {
        return getPedigreedescriptionId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getRelationshipDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component7() {
        return getCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component8() {
        return getUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getGerminatebaseId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getParentId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PedigreesRelationshipType value4() {
        return getRelationshipType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getPedigreedescriptionId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getRelationshipDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value7() {
        return getCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value8() {
        return getUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PedigreesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PedigreesRecord value2(Integer value) {
        setGerminatebaseId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PedigreesRecord value3(Integer value) {
        setParentId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PedigreesRecord value4(PedigreesRelationshipType value) {
        setRelationshipType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PedigreesRecord value5(Integer value) {
        setPedigreedescriptionId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PedigreesRecord value6(String value) {
        setRelationshipDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PedigreesRecord value7(Timestamp value) {
        setCreatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PedigreesRecord value8(Timestamp value) {
        setUpdatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PedigreesRecord values(Integer value1, Integer value2, Integer value3, PedigreesRelationshipType value4, Integer value5, String value6, Timestamp value7, Timestamp value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PedigreesRecord
     */
    public PedigreesRecord() {
        super(Pedigrees.PEDIGREES);
    }

    /**
     * Create a detached, initialised PedigreesRecord
     */
    public PedigreesRecord(Integer id, Integer germinatebaseId, Integer parentId, PedigreesRelationshipType relationshipType, Integer pedigreedescriptionId, String relationshipDescription, Timestamp createdOn, Timestamp updatedOn) {
        super(Pedigrees.PEDIGREES);

        set(0, id);
        set(1, germinatebaseId);
        set(2, parentId);
        set(3, relationshipType);
        set(4, pedigreedescriptionId);
        set(5, relationshipDescription);
        set(6, createdOn);
        set(7, updatedOn);
    }
// @formatter:on
}
