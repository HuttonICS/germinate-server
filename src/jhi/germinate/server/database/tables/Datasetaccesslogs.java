/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.sql.*;
import java.util.*;

import javax.annotation.*;

import jhi.germinate.server.database.*;
import jhi.germinate.server.database.tables.records.*;


/**
 * If enabled, tracks which user accessed which datasets.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Datasetaccesslogs extends TableImpl<DatasetaccesslogsRecord> {

    /**
     * The reference instance of <code>germinate_template_3_6_0.datasetaccesslogs</code>
     */
    public static final Datasetaccesslogs DATASETACCESSLOGS = new Datasetaccesslogs();
    private static final long serialVersionUID = -1134667106;
    /**
     * The column <code>germinate_template_3_6_0.datasetaccesslogs.id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<DatasetaccesslogsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");
    /**
     * The column <code>germinate_template_3_6_0.datasetaccesslogs.user_id</code>.
     */
    public final TableField<DatasetaccesslogsRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");
    /**
     * The column <code>germinate_template_3_6_0.datasetaccesslogs.user_name</code>.
     */
    public final TableField<DatasetaccesslogsRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>germinate_template_3_6_0.datasetaccesslogs.user_email</code>.
     */
    public final TableField<DatasetaccesslogsRecord, String> USER_EMAIL = createField("user_email", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>germinate_template_3_6_0.datasetaccesslogs.user_institution</code>.
     */
    public final TableField<DatasetaccesslogsRecord, String> USER_INSTITUTION = createField("user_institution", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>germinate_template_3_6_0.datasetaccesslogs.dataset_id</code>.
     */
    public final TableField<DatasetaccesslogsRecord, Integer> DATASET_ID = createField("dataset_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>germinate_template_3_6_0.datasetaccesslogs.reason</code>.
     */
    public final TableField<DatasetaccesslogsRecord, String> REASON = createField("reason", org.jooq.impl.SQLDataType.CLOB, this, "");
    /**
     * The column <code>germinate_template_3_6_0.datasetaccesslogs.created_on</code>. When the record was created.
     */
    public final TableField<DatasetaccesslogsRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was created.");
    /**
     * The column <code>germinate_template_3_6_0.datasetaccesslogs.updated_on</code>. When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.
     */
    public final TableField<DatasetaccesslogsRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * Create a <code>germinate_template_3_6_0.datasetaccesslogs</code> table reference
     */
    public Datasetaccesslogs() {
        this(DSL.name("datasetaccesslogs"), null);
    }

    /**
     * Create an aliased <code>germinate_template_3_6_0.datasetaccesslogs</code> table reference
     */
    public Datasetaccesslogs(String alias) {
        this(DSL.name(alias), DATASETACCESSLOGS);
    }

    /**
     * Create an aliased <code>germinate_template_3_6_0.datasetaccesslogs</code> table reference
     */
    public Datasetaccesslogs(Name alias) {
        this(alias, DATASETACCESSLOGS);
    }

    private Datasetaccesslogs(Name alias, Table<DatasetaccesslogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Datasetaccesslogs(Name alias, Table<DatasetaccesslogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("If enabled, tracks which user accessed which datasets."));
    }

    public <O extends Record> Datasetaccesslogs(Table<O> child, ForeignKey<O, DatasetaccesslogsRecord> key) {
        super(child, key, DATASETACCESSLOGS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatasetaccesslogsRecord> getRecordType() {
        return DatasetaccesslogsRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_3_6_0.GERMINATE_TEMPLATE_3_6_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATASETACCESSLOGS_DATASET_ID, Indexes.DATASETACCESSLOGS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DatasetaccesslogsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DATASETACCESSLOGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DatasetaccesslogsRecord> getPrimaryKey() {
        return Keys.KEY_DATASETACCESSLOGS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DatasetaccesslogsRecord>> getKeys() {
        return Arrays.<UniqueKey<DatasetaccesslogsRecord>>asList(Keys.KEY_DATASETACCESSLOGS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DatasetaccesslogsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DatasetaccesslogsRecord, ?>>asList(Keys.DATASETACCESSLOGS_IBFK_1);
    }

    public Datasets datasets() {
        return new Datasets(this, Keys.DATASETACCESSLOGS_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Datasetaccesslogs as(String alias) {
        return new Datasetaccesslogs(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Datasetaccesslogs as(Name alias) {
        return new Datasetaccesslogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasetaccesslogs rename(String name) {
        return new Datasetaccesslogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Datasetaccesslogs rename(Name name) {
        return new Datasetaccesslogs(name, null);
    }
}
