/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import javax.annotation.*;

import jhi.germinate.server.database.*;
import jhi.germinate.server.database.tables.records.*;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableMaps extends TableImpl<ViewTableMapsRecord> {

    private static final long serialVersionUID = 1718293939;

    /**
     * The reference instance of <code>germinate_template_3_7_0.view_table_maps</code>
     */
    public static final ViewTableMaps VIEW_TABLE_MAPS = new ViewTableMaps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTableMapsRecord> getRecordType() {
        return ViewTableMapsRecord.class;
    }

    /**
     * The column <code>germinate_template_3_7_0.view_table_maps.mapId</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTableMapsRecord, Integer> MAPID = createField("mapId", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_template_3_7_0.view_table_maps.mapName</code>. Describes the map.
     */
    public final TableField<ViewTableMapsRecord, String> MAPNAME = createField("mapName", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "Describes the map.");

    /**
     * The column <code>germinate_template_3_7_0.view_table_maps.mapDescription</code>. The name of this map.
     */
    public final TableField<ViewTableMapsRecord, String> MAPDESCRIPTION = createField("mapDescription", org.jooq.impl.SQLDataType.CLOB, this, "The name of this map.");

    /**
     * The column <code>germinate_template_3_7_0.view_table_maps.userId</code>. Foreign key to Gatekeeper users (Gatekeeper users.id).
     */
    public final TableField<ViewTableMapsRecord, Integer> USERID = createField("userId", org.jooq.impl.SQLDataType.INTEGER, this, "Foreign key to Gatekeeper users (Gatekeeper users.id).");

    /**
     * The column <code>germinate_template_3_7_0.view_table_maps.visibility</code>. Determines if the map is visible to the Germinate interface or hidden.
     */
    public final TableField<ViewTableMapsRecord, Byte> VISIBILITY = createField("visibility", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "Determines if the map is visible to the Germinate interface or hidden.");

    /**
     * The column <code>germinate_template_3_7_0.view_table_maps.markerCount</code>.
     */
    public final TableField<ViewTableMapsRecord, Long> MARKERCOUNT = createField("markerCount", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>germinate_template_3_7_0.view_table_maps</code> table reference
     */
    public ViewTableMaps() {
        this(DSL.name("view_table_maps"), null);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.view_table_maps</code> table reference
     */
    public ViewTableMaps(String alias) {
        this(DSL.name(alias), VIEW_TABLE_MAPS);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.view_table_maps</code> table reference
     */
    public ViewTableMaps(Name alias) {
        this(alias, VIEW_TABLE_MAPS);
    }

    private ViewTableMaps(Name alias, Table<ViewTableMapsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTableMaps(Name alias, Table<ViewTableMapsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    public <O extends Record> ViewTableMaps(Table<O> child, ForeignKey<O, ViewTableMapsRecord> key) {
        super(child, key, VIEW_TABLE_MAPS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_3_7_0.GERMINATE_TEMPLATE_3_7_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMaps as(String alias) {
        return new ViewTableMaps(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMaps as(Name alias) {
        return new ViewTableMaps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableMaps rename(String name) {
        return new ViewTableMaps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableMaps rename(Name name) {
        return new ViewTableMaps(name, null);
    }
}
