/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.sql.Timestamp;
import java.util.*;

import javax.annotation.Generated;

import jhi.germinate.server.database.*;
import jhi.germinate.server.database.tables.records.MarkertypesRecord;


/**
 * Describes the marker type. Markers (markers) have a defined type. This 
 * could be AFLP, MicroSat, SNP and so on. Used to differentiate markers within 
 * the markers table and alllows for mixing of marker types on genetic and 
 * physical maps.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Markertypes extends TableImpl<MarkertypesRecord> {

    private static final long serialVersionUID = 110964647;

    /**
     * The reference instance of <code>germinate_template_3_7_0.markertypes</code>
     */
    public static final Markertypes MARKERTYPES = new Markertypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarkertypesRecord> getRecordType() {
        return MarkertypesRecord.class;
    }

    /**
     * The column <code>germinate_template_3_7_0.markertypes.id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<MarkertypesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_template_3_7_0.markertypes.description</code>. Describes the marker type. Markers (markers) have a defined type. This could be AFLP, MicroSat, SNP and so on.
     */
    public final TableField<MarkertypesRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "Describes the marker type. Markers (markers) have a defined type. This could be AFLP, MicroSat, SNP and so on.");

    /**
     * The column <code>germinate_template_3_7_0.markertypes.created_on</code>. When the record was created.
     */
    public final TableField<MarkertypesRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_template_3_7_0.markertypes.updated_on</code>. When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.
     */
    public final TableField<MarkertypesRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * Create a <code>germinate_template_3_7_0.markertypes</code> table reference
     */
    public Markertypes() {
        this(DSL.name("markertypes"), null);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.markertypes</code> table reference
     */
    public Markertypes(String alias) {
        this(DSL.name(alias), MARKERTYPES);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.markertypes</code> table reference
     */
    public Markertypes(Name alias) {
        this(alias, MARKERTYPES);
    }

    private Markertypes(Name alias, Table<MarkertypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Markertypes(Name alias, Table<MarkertypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Describes the marker type. Markers (markers) have a defined type. This could be AFLP, MicroSat, SNP and so on. Used to differentiate markers within the markers table and alllows for mixing of marker types on genetic and physical maps."));
    }

    public <O extends Record> Markertypes(Table<O> child, ForeignKey<O, MarkertypesRecord> key) {
        super(child, key, MARKERTYPES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_3_7_0.GERMINATE_TEMPLATE_3_7_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MARKERTYPES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MarkertypesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MARKERTYPES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MarkertypesRecord> getPrimaryKey() {
        return Keys.KEY_MARKERTYPES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MarkertypesRecord>> getKeys() {
        return Arrays.<UniqueKey<MarkertypesRecord>>asList(Keys.KEY_MARKERTYPES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Markertypes as(String alias) {
        return new Markertypes(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Markertypes as(Name alias) {
        return new Markertypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Markertypes rename(String name) {
        return new Markertypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Markertypes rename(Name name) {
        return new Markertypes(name, null);
    }
}
