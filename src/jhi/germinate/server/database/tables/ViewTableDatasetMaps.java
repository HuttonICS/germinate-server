/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import javax.annotation.Generated;

import jhi.germinate.server.database.GerminateTemplate_3_7_0;
import jhi.germinate.server.database.tables.records.ViewTableDatasetMapsRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableDatasetMaps extends TableImpl<ViewTableDatasetMapsRecord> {

    private static final long serialVersionUID = -429052511;

    /**
     * The reference instance of <code>germinate_template_3_7_0.view_table_dataset_maps</code>
     */
    public static final ViewTableDatasetMaps VIEW_TABLE_DATASET_MAPS = new ViewTableDatasetMaps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTableDatasetMapsRecord> getRecordType() {
        return ViewTableDatasetMapsRecord.class;
    }

    /**
     * The column <code>germinate_template_3_7_0.view_table_dataset_maps.map_id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTableDatasetMapsRecord, Integer> MAP_ID = createField("map_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_template_3_7_0.view_table_dataset_maps.map_name</code>. Describes the map.
     */
    public final TableField<ViewTableDatasetMapsRecord, String> MAP_NAME = createField("map_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "Describes the map.");

    /**
     * The column <code>germinate_template_3_7_0.view_table_dataset_maps.map_description</code>. The name of this map.
     */
    public final TableField<ViewTableDatasetMapsRecord, String> MAP_DESCRIPTION = createField("map_description", org.jooq.impl.SQLDataType.CLOB, this, "The name of this map.");

    /**
     * The column <code>germinate_template_3_7_0.view_table_dataset_maps.user_id</code>. Foreign key to Gatekeeper users (Gatekeeper users.id).
     */
    public final TableField<ViewTableDatasetMapsRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "Foreign key to Gatekeeper users (Gatekeeper users.id).");

    /**
     * The column <code>germinate_template_3_7_0.view_table_dataset_maps.visibility</code>. Determines if the map is visible to the Germinate interface or hidden.
     */
    public final TableField<ViewTableDatasetMapsRecord, Boolean> VISIBILITY = createField("visibility", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Determines if the map is visible to the Germinate interface or hidden.");

    /**
     * The column <code>germinate_template_3_7_0.view_table_dataset_maps.dataset_id</code>.
     */
    public final TableField<ViewTableDatasetMapsRecord, Integer> DATASET_ID = createField("dataset_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>germinate_template_3_7_0.view_table_dataset_maps.marker_count</code>.
     */
    public final TableField<ViewTableDatasetMapsRecord, Long> MARKER_COUNT = createField("marker_count", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>germinate_template_3_7_0.view_table_dataset_maps</code> table reference
     */
    public ViewTableDatasetMaps() {
        this(DSL.name("view_table_dataset_maps"), null);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.view_table_dataset_maps</code> table reference
     */
    public ViewTableDatasetMaps(String alias) {
        this(DSL.name(alias), VIEW_TABLE_DATASET_MAPS);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.view_table_dataset_maps</code> table reference
     */
    public ViewTableDatasetMaps(Name alias) {
        this(alias, VIEW_TABLE_DATASET_MAPS);
    }

    private ViewTableDatasetMaps(Name alias, Table<ViewTableDatasetMapsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTableDatasetMaps(Name alias, Table<ViewTableDatasetMapsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_3_7_0.GERMINATE_TEMPLATE_3_7_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableDatasetMaps as(String alias) {
        return new ViewTableDatasetMaps(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableDatasetMaps as(Name alias) {
        return new ViewTableDatasetMaps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableDatasetMaps rename(String name) {
        return new ViewTableDatasetMaps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableDatasetMaps rename(Name name) {
        return new ViewTableDatasetMaps(name, null);
    }
// @formatter:on
}
