/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import javax.annotation.Generated;

import jhi.germinate.server.database.GerminateTemplate_3_7_0;
import jhi.germinate.server.database.enums.ViewTablePedigreesRelationshipType;
import jhi.germinate.server.database.tables.records.ViewTablePedigreesRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTablePedigrees extends TableImpl<ViewTablePedigreesRecord> {

    /**
     * The reference instance of <code>germinate_template_3_7_0.view_table_pedigrees</code>
     */
    public static final ViewTablePedigrees VIEW_TABLE_PEDIGREES = new ViewTablePedigrees();
    private static final long serialVersionUID = 2089556213;
    /**
     * The column <code>germinate_template_3_7_0.view_table_pedigrees.parent_id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTablePedigreesRecord, Integer> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");
    /**
     * The column <code>germinate_template_3_7_0.view_table_pedigrees.parent_gid</code>. A unique identifier.
     */
    public final TableField<ViewTablePedigreesRecord, String> PARENT_GID = createField("parent_gid", org.jooq.impl.SQLDataType.VARCHAR(255), this, "A unique identifier.");
    /**
     * The column <code>germinate_template_3_7_0.view_table_pedigrees.parent_name</code>. A unique name which defines an entry in the germinatbase table.
     */
    public final TableField<ViewTablePedigreesRecord, String> PARENT_NAME = createField("parent_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "A unique name which defines an entry in the germinatbase table.");
    /**
     * The column <code>germinate_template_3_7_0.view_table_pedigrees.child_id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ViewTablePedigreesRecord, Integer> CHILD_ID = createField("child_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "Primary id for this table. This uniquely identifies the row.");
    /**
     * The column <code>germinate_template_3_7_0.view_table_pedigrees.child_gid</code>. A unique identifier.
     */
    public final TableField<ViewTablePedigreesRecord, String> CHILD_GID = createField("child_gid", org.jooq.impl.SQLDataType.VARCHAR(255), this, "A unique identifier.");
    /**
     * The column <code>germinate_template_3_7_0.view_table_pedigrees.child_name</code>. A unique name which defines an entry in the germinatbase table.
     */
    public final TableField<ViewTablePedigreesRecord, String> CHILD_NAME = createField("child_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "A unique name which defines an entry in the germinatbase table.");
    /**
     * The column <code>germinate_template_3_7_0.view_table_pedigrees.relationship_type</code>. Male or Female parent. Should be recorded as 'M' (male) or 'F' (female).
     */
    public final TableField<ViewTablePedigreesRecord, ViewTablePedigreesRelationshipType> RELATIONSHIP_TYPE = createField("relationship_type", org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false).defaultValue(org.jooq.impl.DSL.inline("OTHER", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(jhi.germinate.server.database.enums.ViewTablePedigreesRelationshipType.class), this, "Male or Female parent. Should be recorded as 'M' (male) or 'F' (female).");
    /**
     * The column <code>germinate_template_3_7_0.view_table_pedigrees.relationship_description</code>. Can be used as a meta-data field to describe the relationships if a complex rellationship is required. Examples may include, 'is a complex cross containing', 'F4 generation' and so on. This is used by the Helium pedigree visualiztion tool.
     */
    public final TableField<ViewTablePedigreesRecord, String> RELATIONSHIP_DESCRIPTION = createField("relationship_description", org.jooq.impl.SQLDataType.CLOB, this, "Can be used as a meta-data field to describe the relationships if a complex rellationship is required. Examples may include, 'is a complex cross containing', 'F4 generation' and so on. This is used by the Helium pedigree visualiztion tool.");
    /**
     * The column <code>germinate_template_3_7_0.view_table_pedigrees.pedigree_description</code>. The name of the pedigree.
     */
    public final TableField<ViewTablePedigreesRecord, String> PEDIGREE_DESCRIPTION = createField("pedigree_description", org.jooq.impl.SQLDataType.VARCHAR(255), this, "The name of the pedigree.");
    /**
     * The column <code>germinate_template_3_7_0.view_table_pedigrees.pedigree_author</code>. Who is responsible for the creation of the pedigree. Attribution should be included in here for pedigree sources.
     */
    public final TableField<ViewTablePedigreesRecord, String> PEDIGREE_AUTHOR = createField("pedigree_author", org.jooq.impl.SQLDataType.VARCHAR(255), this, "Who is responsible for the creation of the pedigree. Attribution should be included in here for pedigree sources.");

    /**
     * Create a <code>germinate_template_3_7_0.view_table_pedigrees</code> table reference
     */
    public ViewTablePedigrees() {
        this(DSL.name("view_table_pedigrees"), null);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.view_table_pedigrees</code> table reference
     */
    public ViewTablePedigrees(String alias) {
        this(DSL.name(alias), VIEW_TABLE_PEDIGREES);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.view_table_pedigrees</code> table reference
     */
    public ViewTablePedigrees(Name alias) {
        this(alias, VIEW_TABLE_PEDIGREES);
    }

    private ViewTablePedigrees(Name alias, Table<ViewTablePedigreesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTablePedigrees(Name alias, Table<ViewTablePedigreesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTablePedigreesRecord> getRecordType() {
        return ViewTablePedigreesRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_3_7_0.GERMINATE_TEMPLATE_3_7_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTablePedigrees as(String alias) {
        return new ViewTablePedigrees(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTablePedigrees as(Name alias) {
        return new ViewTablePedigrees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTablePedigrees rename(String name) {
        return new ViewTablePedigrees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTablePedigrees rename(Name name) {
        return new ViewTablePedigrees(name, null);
    }
// @formatter:on
}
