/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.sql.*;
import java.util.*;

import javax.annotation.*;

import jhi.germinate.server.database.*;
import jhi.germinate.server.database.tables.records.*;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Storage extends TableImpl<StorageRecord> {

    /**
     * The reference instance of <code>germinate_template_3_7_0.storage</code>
     */
    public static final Storage STORAGE = new Storage();
    private static final long serialVersionUID = 420963863;

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StorageRecord> getRecordType() {
        return StorageRecord.class;
    }
    /**
     * The column <code>germinate_template_3_7_0.storage.id</code>.
     */
    public final TableField<StorageRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>germinate_template_3_7_0.storage.description</code>.
     */
    public final TableField<StorageRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>germinate_template_3_7_0.storage.created_on</code>. When the record was created.
     */
    public final TableField<StorageRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_template_3_7_0.storage.updated_on</code>. When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.
     */
    public final TableField<StorageRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * Create a <code>germinate_template_3_7_0.storage</code> table reference
     */
    public Storage() {
        this(DSL.name("storage"), null);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.storage</code> table reference
     */
    public Storage(String alias) {
        this(DSL.name(alias), STORAGE);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.storage</code> table reference
     */
    public Storage(Name alias) {
        this(alias, STORAGE);
    }

    private Storage(Name alias, Table<StorageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Storage(Name alias, Table<StorageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Storage(Table<O> child, ForeignKey<O, StorageRecord> key) {
        super(child, key, STORAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_3_7_0.GERMINATE_TEMPLATE_3_7_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STORAGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StorageRecord> getPrimaryKey() {
        return Keys.KEY_STORAGE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StorageRecord>> getKeys() {
        return Arrays.<UniqueKey<StorageRecord>>asList(Keys.KEY_STORAGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Storage as(String alias) {
        return new Storage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Storage as(Name alias) {
        return new Storage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Storage rename(String name) {
        return new Storage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Storage rename(Name name) {
        return new Storage(name, null);
    }
}
