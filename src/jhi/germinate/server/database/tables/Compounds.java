/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.math.*;
import java.sql.*;
import java.util.*;

import javax.annotation.*;

import jhi.germinate.server.database.*;
import jhi.germinate.server.database.tables.records.*;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Compounds extends TableImpl<CompoundsRecord> {

    private static final long serialVersionUID = -377193355;

    /**
     * The reference instance of <code>germinate_template_3_7_0.compounds</code>
     */
    public static final Compounds COMPOUNDS = new Compounds();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompoundsRecord> getRecordType() {
        return CompoundsRecord.class;
    }

    /**
     * The column <code>germinate_template_3_7_0.compounds.id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<CompoundsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_template_3_7_0.compounds.name</code>. Compound full name.
     */
    public final TableField<CompoundsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "Compound full name.");

    /**
     * The column <code>germinate_template_3_7_0.compounds.description</code>. Full description of the compound. This should contain enough infomation to accurately identify the compound and how it was recorded.
     */
    public final TableField<CompoundsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255), this, "Full description of the compound. This should contain enough infomation to accurately identify the compound and how it was recorded.");

    /**
     * The column <code>germinate_template_3_7_0.compounds.molecular_formula</code>. The molecular formula of the compound.
     */
    public final TableField<CompoundsRecord, String> MOLECULAR_FORMULA = createField("molecular_formula", org.jooq.impl.SQLDataType.VARCHAR(255), this, "The molecular formula of the compound.");

    /**
     * The column <code>germinate_template_3_7_0.compounds.monoisotopic_mass</code>. The monoisotopic mass of the compound.
     */
    public final TableField<CompoundsRecord, BigDecimal> MONOISOTOPIC_MASS = createField("monoisotopic_mass", org.jooq.impl.SQLDataType.DECIMAL(64, 10), this, "The monoisotopic mass of the compound.");

    /**
     * The column <code>germinate_template_3_7_0.compounds.average_mass</code>. The average mass of the compound.
     */
    public final TableField<CompoundsRecord, BigDecimal> AVERAGE_MASS = createField("average_mass", org.jooq.impl.SQLDataType.DECIMAL(64, 10), this, "The average mass of the compound.");

    /**
     * The column <code>germinate_template_3_7_0.compounds.compound_class</code>. A classification of the compound.
     */
    public final TableField<CompoundsRecord, String> COMPOUND_CLASS = createField("compound_class", org.jooq.impl.SQLDataType.VARCHAR(255), this, "A classification of the compound.");

    /**
     * The column <code>germinate_template_3_7_0.compounds.unit_id</code>. Foreign Key to units (units.id).
     */
    public final TableField<CompoundsRecord, Integer> UNIT_ID = createField("unit_id", org.jooq.impl.SQLDataType.INTEGER, this, "Foreign Key to units (units.id).");

    /**
     * The column <code>germinate_template_3_7_0.compounds.created_on</code>. When the record was created.
     */
    public final TableField<CompoundsRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_template_3_7_0.compounds.updated_on</code>. When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.
     */
    public final TableField<CompoundsRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * Create a <code>germinate_template_3_7_0.compounds</code> table reference
     */
    public Compounds() {
        this(DSL.name("compounds"), null);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.compounds</code> table reference
     */
    public Compounds(String alias) {
        this(DSL.name(alias), COMPOUNDS);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.compounds</code> table reference
     */
    public Compounds(Name alias) {
        this(alias, COMPOUNDS);
    }

    private Compounds(Name alias, Table<CompoundsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Compounds(Name alias, Table<CompoundsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Compounds(Table<O> child, ForeignKey<O, CompoundsRecord> key) {
        super(child, key, COMPOUNDS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_3_7_0.GERMINATE_TEMPLATE_3_7_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPOUNDS_COMPOUNDS_IBFK_UNIT, Indexes.COMPOUNDS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CompoundsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPOUNDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CompoundsRecord> getPrimaryKey() {
        return Keys.KEY_COMPOUNDS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CompoundsRecord>> getKeys() {
        return Arrays.<UniqueKey<CompoundsRecord>>asList(Keys.KEY_COMPOUNDS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CompoundsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CompoundsRecord, ?>>asList(Keys.COMPOUNDS_IBFK_1);
    }

    public Units units() {
        return new Units(this, Keys.COMPOUNDS_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Compounds as(String alias) {
        return new Compounds(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Compounds as(Name alias) {
        return new Compounds(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Compounds rename(String name) {
        return new Compounds(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Compounds rename(Name name) {
        return new Compounds(name, null);
    }
}
