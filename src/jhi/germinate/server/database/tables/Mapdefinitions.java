/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.sql.*;
import java.util.*;

import javax.annotation.*;

import jhi.germinate.server.database.*;
import jhi.germinate.server.database.tables.records.*;


/**
 * Relates genetic markers to a map and assigns a position (if known). Maps 
 * are made up of lists of markers and positions (genetic or physiscal and 
 * chromosome/linkage group assignation). In the case of QTL the definition_start 
 * and definition_end columns can be used to specify a range across a linkage 
 * group.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mapdefinitions extends TableImpl<MapdefinitionsRecord> {

    /**
     * The reference instance of <code>germinate_template_3_7_0.mapdefinitions</code>
     */
    public static final Mapdefinitions MAPDEFINITIONS = new Mapdefinitions();
    private static final long serialVersionUID = 694729303;

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapdefinitionsRecord> getRecordType() {
        return MapdefinitionsRecord.class;
    }
    /**
     * The column <code>germinate_template_3_7_0.mapdefinitions.id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<MapdefinitionsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_template_3_7_0.mapdefinitions.mapfeaturetype_id</code>. Foreign key to mapfeaturetypes (mapfeaturetypes.id).
     */
    public final TableField<MapdefinitionsRecord, Integer> MAPFEATURETYPE_ID = createField("mapfeaturetype_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Foreign key to mapfeaturetypes (mapfeaturetypes.id).");

    /**
     * The column <code>germinate_template_3_7_0.mapdefinitions.marker_id</code>. Foreign key to markers (markers.id).
     */
    public final TableField<MapdefinitionsRecord, Integer> MARKER_ID = createField("marker_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Foreign key to markers (markers.id).");

    /**
     * The column <code>germinate_template_3_7_0.mapdefinitions.map_id</code>. Foreign key to maps (maps.id).
     */
    public final TableField<MapdefinitionsRecord, Integer> MAP_ID = createField("map_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Foreign key to maps (maps.id).");

    /**
     * The column <code>germinate_template_3_7_0.mapdefinitions.definition_start</code>. Used if the markers location spans over an area more than a single point on the maps. Determines the marker start location.
     */
    public final TableField<MapdefinitionsRecord, Double> DEFINITION_START = createField("definition_start", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "Used if the markers location spans over an area more than a single point on the maps. Determines the marker start location.");

    /**
     * The column <code>germinate_template_3_7_0.mapdefinitions.definition_end</code>. Used if the markers location spans over an area more than a single point on the maps. Determines the marker end location.
     */
    public final TableField<MapdefinitionsRecord, Double> DEFINITION_END = createField("definition_end", org.jooq.impl.SQLDataType.DOUBLE, this, "Used if the markers location spans over an area more than a single point on the maps. Determines the marker end location.");

    /**
     * The column <code>germinate_template_3_7_0.mapdefinitions.chromosome</code>. The chromosome/linkage group that this marker is found on.
     */
    public final TableField<MapdefinitionsRecord, String> CHROMOSOME = createField("chromosome", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "The chromosome/linkage group that this marker is found on.");

    /**
     * The column <code>germinate_template_3_7_0.mapdefinitions.arm_impute</code>. If a chromosome arm is available then this can be entered here.
     */
    public final TableField<MapdefinitionsRecord, String> ARM_IMPUTE = createField("arm_impute", org.jooq.impl.SQLDataType.VARCHAR(255), this, "If a chromosome arm is available then this can be entered here.");

    /**
     * The column <code>germinate_template_3_7_0.mapdefinitions.created_on</code>. When the record was created.
     */
    public final TableField<MapdefinitionsRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_template_3_7_0.mapdefinitions.updated_on</code>. When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.
     */
    public final TableField<MapdefinitionsRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * Create a <code>germinate_template_3_7_0.mapdefinitions</code> table reference
     */
    public Mapdefinitions() {
        this(DSL.name("mapdefinitions"), null);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.mapdefinitions</code> table reference
     */
    public Mapdefinitions(String alias) {
        this(DSL.name(alias), MAPDEFINITIONS);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.mapdefinitions</code> table reference
     */
    public Mapdefinitions(Name alias) {
        this(alias, MAPDEFINITIONS);
    }

    private Mapdefinitions(Name alias, Table<MapdefinitionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mapdefinitions(Name alias, Table<MapdefinitionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Relates genetic markers to a map and assigns a position (if known). Maps are made up of lists of markers and positions (genetic or physiscal and chromosome/linkage group assignation). In the case of QTL the definition_start and definition_end columns can be used to specify a range across a linkage group."));
    }

    public <O extends Record> Mapdefinitions(Table<O> child, ForeignKey<O, MapdefinitionsRecord> key) {
        super(child, key, MAPDEFINITIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_3_7_0.GERMINATE_TEMPLATE_3_7_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MAPDEFINITIONS_MAPFEATURETYPE_ID, Indexes.MAPDEFINITIONS_MAP_ID, Indexes.MAPDEFINITIONS_MARKER_ID, Indexes.MAPDEFINITIONS_MARKER_ID_2, Indexes.MAPDEFINITIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MapdefinitionsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MAPDEFINITIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MapdefinitionsRecord> getPrimaryKey() {
        return Keys.KEY_MAPDEFINITIONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MapdefinitionsRecord>> getKeys() {
        return Arrays.<UniqueKey<MapdefinitionsRecord>>asList(Keys.KEY_MAPDEFINITIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MapdefinitionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MapdefinitionsRecord, ?>>asList(Keys.MAPDEFINITIONS_IBFK_1, Keys.MAPDEFINITIONS_IBFK_2, Keys.MAPDEFINITIONS_IBFK_3);
    }

    public Mapfeaturetypes mapfeaturetypes() {
        return new Mapfeaturetypes(this, Keys.MAPDEFINITIONS_IBFK_1);
    }

    public Markers markers() {
        return new Markers(this, Keys.MAPDEFINITIONS_IBFK_2);
    }

    public Maps maps() {
        return new Maps(this, Keys.MAPDEFINITIONS_IBFK_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mapdefinitions as(String alias) {
        return new Mapdefinitions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mapdefinitions as(Name alias) {
        return new Mapdefinitions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mapdefinitions rename(String name) {
        return new Mapdefinitions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mapdefinitions rename(Name name) {
        return new Mapdefinitions(name, null);
    }
}
