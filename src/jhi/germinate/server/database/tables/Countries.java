/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.sql.*;
import java.util.*;

import javax.annotation.*;

import jhi.germinate.server.database.*;
import jhi.germinate.server.database.tables.records.*;


/**
 * Countries that are used in the locations type tables in Germinate. These 
 * are the ISO codes for countries.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Countries extends TableImpl<CountriesRecord> {

    /**
     * The reference instance of <code>germinate_template_3_7_0.countries</code>
     */
    public static final Countries COUNTRIES = new Countries();
    private static final long serialVersionUID = 635974134;

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountriesRecord> getRecordType() {
        return CountriesRecord.class;
    }
    /**
     * The column <code>germinate_template_3_7_0.countries.id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<CountriesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_template_3_7_0.countries.country_code2</code>. ISO 2 Code for country.
     */
    public final TableField<CountriesRecord, String> COUNTRY_CODE2 = createField("country_code2", org.jooq.impl.SQLDataType.CHAR(2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "ISO 2 Code for country.");

    /**
     * The column <code>germinate_template_3_7_0.countries.country_code3</code>. ISO 3 Code for country.
     */
    public final TableField<CountriesRecord, String> COUNTRY_CODE3 = createField("country_code3", org.jooq.impl.SQLDataType.CHAR(3).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "ISO 3 Code for country.");

    /**
     * The column <code>germinate_template_3_7_0.countries.country_name</code>. Country name.
     */
    public final TableField<CountriesRecord, String> COUNTRY_NAME = createField("country_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "Country name.");

    /**
     * The column <code>germinate_template_3_7_0.countries.created_on</code>. When the record was created.
     */
    public final TableField<CountriesRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_template_3_7_0.countries.updated_on</code>. When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.
     */
    public final TableField<CountriesRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * Create a <code>germinate_template_3_7_0.countries</code> table reference
     */
    public Countries() {
        this(DSL.name("countries"), null);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.countries</code> table reference
     */
    public Countries(String alias) {
        this(DSL.name(alias), COUNTRIES);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.countries</code> table reference
     */
    public Countries(Name alias) {
        this(alias, COUNTRIES);
    }

    private Countries(Name alias, Table<CountriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Countries(Name alias, Table<CountriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Countries that are used in the locations type tables in Germinate. These are the ISO codes for countries."));
    }

    public <O extends Record> Countries(Table<O> child, ForeignKey<O, CountriesRecord> key) {
        super(child, key, COUNTRIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_3_7_0.GERMINATE_TEMPLATE_3_7_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COUNTRIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CountriesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COUNTRIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CountriesRecord> getPrimaryKey() {
        return Keys.KEY_COUNTRIES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CountriesRecord>> getKeys() {
        return Arrays.<UniqueKey<CountriesRecord>>asList(Keys.KEY_COUNTRIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Countries as(String alias) {
        return new Countries(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Countries as(Name alias) {
        return new Countries(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(String name) {
        return new Countries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Countries rename(Name name) {
        return new Countries(name, null);
    }
}
