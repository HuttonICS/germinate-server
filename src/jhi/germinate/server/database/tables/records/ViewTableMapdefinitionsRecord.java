/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables.records;


import javax.annotation.Generated;

import jhi.germinate.server.database.tables.ViewTableMapdefinitions;

import org.jooq.Field;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.TableRecordImpl;


// @formatter:off
/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableMapdefinitionsRecord extends TableRecordImpl<ViewTableMapdefinitionsRecord> implements Record10<Integer, String, Object, String, Integer, Integer, Byte, String, String, Double> {

    private static final long serialVersionUID = 1943076195;

    /**
     * Create a detached ViewTableMapdefinitionsRecord
     */
    public ViewTableMapdefinitionsRecord() {
        super(ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS);
    }

    /**
     * Getter for <code>germinate_template_3_7_0.view_table_mapdefinitions.markerId</code>. Primary id for this table. This uniquely identifies the row.
     */
    public Integer getMarkerid() {
        return (Integer) get(0);
    }

    /**
     * Create a detached, initialised ViewTableMapdefinitionsRecord
     */
    public ViewTableMapdefinitionsRecord(Integer markerid, String markername, Object synonyms, String mapfeaturetype, Integer mapid, Integer userid, Byte visibility, String mapname, String chromosome, Double position) {
        super(ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS);

        set(0, markerid);
        set(1, markername);
        set(2, synonyms);
        set(3, mapfeaturetype);
        set(4, mapid);
        set(5, userid);
        set(6, visibility);
        set(7, mapname);
        set(8, chromosome);
        set(9, position);
    }

    /**
     * Getter for <code>germinate_template_3_7_0.view_table_mapdefinitions.markerName</code>. The name of the marker. This should be a unique name which identifies the marker.
     */
    public String getMarkername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>germinate_template_3_7_0.view_table_mapdefinitions.markerId</code>. Primary id for this table. This uniquely identifies the row.
     */
    public void setMarkerid(Integer value) {
        set(0, value);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public Object getSynonyms() {
        return get(2);
    }

    /**
     * Setter for <code>germinate_template_3_7_0.view_table_mapdefinitions.mapFeatureType</code>. Description of the feature type. This could include a definition of the marker type such as 'SNP', 'KASP' or 'AFLP'.
     */
    public void setMapfeaturetype(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>germinate_template_3_7_0.view_table_mapdefinitions.mapFeatureType</code>. Description of the feature type. This could include a definition of the marker type such as 'SNP', 'KASP' or 'AFLP'.
     */
    public String getMapfeaturetype() {
        return (String) get(3);
    }

    /**
     * Setter for <code>germinate_template_3_7_0.view_table_mapdefinitions.markerName</code>. The name of the marker. This should be a unique name which identifies the marker.
     */
    public void setMarkername(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>germinate_template_3_7_0.view_table_mapdefinitions.mapId</code>. Primary id for this table. This uniquely identifies the row.
     */
    public Integer getMapid() {
        return (Integer) get(4);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public void setSynonyms(Object value) {
        set(2, value);
    }

    /**
     * Getter for <code>germinate_template_3_7_0.view_table_mapdefinitions.userId</code>. Foreign key to Gatekeeper users (Gatekeeper users.id).
     */
    public Integer getUserid() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>germinate_template_3_7_0.view_table_mapdefinitions.mapId</code>. Primary id for this table. This uniquely identifies the row.
     */
    public void setMapid(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>germinate_template_3_7_0.view_table_mapdefinitions.visibility</code>. Determines if the map is visible to the Germinate interface or hidden.
     */
    public Byte getVisibility() {
        return (Byte) get(6);
    }

    /**
     * Setter for <code>germinate_template_3_7_0.view_table_mapdefinitions.mapName</code>. Describes the map.
     */
    public void setMapname(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>germinate_template_3_7_0.view_table_mapdefinitions.mapName</code>. Describes the map.
     */
    public String getMapname() {
        return (String) get(7);
    }

    /**
     * Setter for <code>germinate_template_3_7_0.view_table_mapdefinitions.chromosome</code>. The chromosome/linkage group that this marker is found on.
     */
    public void setChromosome(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>germinate_template_3_7_0.view_table_mapdefinitions.chromosome</code>. The chromosome/linkage group that this marker is found on.
     */
    public String getChromosome() {
        return (String) get(8);
    }

    /**
     * Setter for <code>germinate_template_3_7_0.view_table_mapdefinitions.userId</code>. Foreign key to Gatekeeper users (Gatekeeper users.id).
     */
    public void setUserid(Integer value) {
        set(5, value);
    }

    /**
     * Setter for <code>germinate_template_3_7_0.view_table_mapdefinitions.visibility</code>. Determines if the map is visible to the Germinate interface or hidden.
     */
    public void setVisibility(Byte value) {
        set(6, value);
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<Integer, String, Object, String, Integer, Integer, Byte, String, String, Double> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<Integer, String, Object, String, Integer, Integer, Byte, String, String, Double> valuesRow() {
        return (Row10) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.MARKERID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.MARKERNAME;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Field<Object> field3() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.SYNONYMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.MAPFEATURETYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.MAPID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.USERID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field7() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.VISIBILITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field8() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.MAPNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field9() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.CHROMOSOME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field10() {
        return ViewTableMapdefinitions.VIEW_TABLE_MAPDEFINITIONS.POSITION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getMarkerid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getMarkername();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object component3() {
        return getSynonyms();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getMapfeaturetype();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component5() {
        return getMapid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component6() {
        return getUserid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte component7() {
        return getVisibility();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component8() {
        return getMapname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component9() {
        return getChromosome();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component10() {
        return getPosition();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getMarkerid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getMarkername();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object value3() {
        return getSynonyms();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getMapfeaturetype();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getMapid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getUserid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value7() {
        return getVisibility();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value8() {
        return getMapname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value9() {
        return getChromosome();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value10() {
        return getPosition();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMapdefinitionsRecord value1(Integer value) {
        setMarkerid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMapdefinitionsRecord value2(String value) {
        setMarkername(value);
        return this;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public ViewTableMapdefinitionsRecord value3(Object value) {
        setSynonyms(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMapdefinitionsRecord value4(String value) {
        setMapfeaturetype(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMapdefinitionsRecord value5(Integer value) {
        setMapid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMapdefinitionsRecord value6(Integer value) {
        setUserid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMapdefinitionsRecord value7(Byte value) {
        setVisibility(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMapdefinitionsRecord value8(String value) {
        setMapname(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMapdefinitionsRecord value9(String value) {
        setChromosome(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMapdefinitionsRecord value10(Double value) {
        setPosition(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewTableMapdefinitionsRecord values(Integer value1, String value2, Object value3, String value4, Integer value5, Integer value6, Byte value7, String value8, String value9, Double value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>germinate_template_3_7_0.view_table_mapdefinitions.position</code>. Used if the markers location spans over an area more than a single point on the maps. Determines the marker start location.
     */
    public Double getPosition() {
        return (Double) get(9);
    }

    /**
     * Setter for <code>germinate_template_3_7_0.view_table_mapdefinitions.position</code>. Used if the markers location spans over an area more than a single point on the maps. Determines the marker start location.
     */
    public void setPosition(Double value) {
        set(9, value);
    }
// @formatter:on
}
