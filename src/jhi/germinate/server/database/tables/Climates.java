/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.sql.*;
import java.util.*;

import javax.annotation.*;

import jhi.germinate.server.database.*;
import jhi.germinate.server.database.enums.*;
import jhi.germinate.server.database.tables.records.*;


/**
 * Defines climates. Climates are measureable weather type characteristics 
 * such as temperature or cloud cover.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Climates extends TableImpl<ClimatesRecord> {

    private static final long serialVersionUID = -1440312228;

    /**
     * The reference instance of <code>germinate_template_3_7_0.climates</code>
     */
    public static final Climates CLIMATES = new Climates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClimatesRecord> getRecordType() {
        return ClimatesRecord.class;
    }

    /**
     * The column <code>germinate_template_3_7_0.climates.id</code>. Primary id for this table. This uniquely identifies the row.
     */
    public final TableField<ClimatesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary id for this table. This uniquely identifies the row.");

    /**
     * The column <code>germinate_template_3_7_0.climates.name</code>. Describes the climate.
     */
    public final TableField<ClimatesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "Describes the climate.");

    /**
     * The column <code>germinate_template_3_7_0.climates.short_name</code>. Shortened version of the climate name which is used in some table headers.
     */
    public final TableField<ClimatesRecord, String> SHORT_NAME = createField("short_name", org.jooq.impl.SQLDataType.CHAR(10), this, "Shortened version of the climate name which is used in some table headers.");

    /**
     * The column <code>germinate_template_3_7_0.climates.description</code>. A longer description of the climate.
     */
    public final TableField<ClimatesRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "A longer description of the climate.");

    /**
     * The column <code>germinate_template_3_7_0.climates.datatype</code>. Defines the datatype which can be FLOAT, INT or CHAR type.
     */
    public final TableField<ClimatesRecord, ClimatesDatatype> DATATYPE = createField("datatype", org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false).defaultValue(org.jooq.impl.DSL.inline("int", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(jhi.germinate.server.database.enums.ClimatesDatatype.class), this, "Defines the datatype which can be FLOAT, INT or CHAR type.");

    /**
     * The column <code>germinate_template_3_7_0.climates.unit_id</code>. Foreign key to units (units.id).

     */
    public final TableField<ClimatesRecord, Integer> UNIT_ID = createField("unit_id", org.jooq.impl.SQLDataType.INTEGER, this, "Foreign key to units (units.id).\n");

    /**
     * The column <code>germinate_template_3_7_0.climates.created_on</code>. When the record was created.
     */
    public final TableField<ClimatesRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was created.");

    /**
     * The column <code>germinate_template_3_7_0.climates.updated_on</code>. When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.
     */
    public final TableField<ClimatesRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "When the record was updated. This may be different from the created on date if subsequent changes have been made to the underlying record.");

    /**
     * Create a <code>germinate_template_3_7_0.climates</code> table reference
     */
    public Climates() {
        this(DSL.name("climates"), null);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.climates</code> table reference
     */
    public Climates(String alias) {
        this(DSL.name(alias), CLIMATES);
    }

    /**
     * Create an aliased <code>germinate_template_3_7_0.climates</code> table reference
     */
    public Climates(Name alias) {
        this(alias, CLIMATES);
    }

    private Climates(Name alias, Table<ClimatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Climates(Name alias, Table<ClimatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Defines climates. Climates are measureable weather type characteristics such as temperature or cloud cover."));
    }

    public <O extends Record> Climates(Table<O> child, ForeignKey<O, ClimatesRecord> key) {
        super(child, key, CLIMATES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return GerminateTemplate_3_7_0.GERMINATE_TEMPLATE_3_7_0;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLIMATES_PRIMARY, Indexes.CLIMATES_UNIT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClimatesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLIMATES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClimatesRecord> getPrimaryKey() {
        return Keys.KEY_CLIMATES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClimatesRecord>> getKeys() {
        return Arrays.<UniqueKey<ClimatesRecord>>asList(Keys.KEY_CLIMATES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ClimatesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClimatesRecord, ?>>asList(Keys.CLIMATES_IBFK_1);
    }

    public Units units() {
        return new Units(this, Keys.CLIMATES_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Climates as(String alias) {
        return new Climates(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Climates as(Name alias) {
        return new Climates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Climates rename(String name) {
        return new Climates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Climates rename(Name name) {
        return new Climates(name, null);
    }
}
