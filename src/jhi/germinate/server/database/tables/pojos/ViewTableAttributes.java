/*
 * This file is generated by jOOQ.
 */
package jhi.germinate.server.database.tables.pojos;


import java.io.Serializable;

import javax.annotation.Generated;

import jhi.germinate.server.database.enums.ViewTableAttributesAttributeType;


// @formatter:off
/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableAttributes implements Serializable {

    private static final long serialVersionUID = 563633274;

    private Integer                          attributeId;
    private String                           attributeName;
    private String                           attributeDescription;
    private ViewTableAttributesAttributeType attributeType;
    private String                           targetTable;
    private Integer                          foreignId;
    private String                           attributeValue;

    public ViewTableAttributes() {}

    public ViewTableAttributes(ViewTableAttributes value) {
        this.attributeId = value.attributeId;
        this.attributeName = value.attributeName;
        this.attributeDescription = value.attributeDescription;
        this.attributeType = value.attributeType;
        this.targetTable = value.targetTable;
        this.foreignId = value.foreignId;
        this.attributeValue = value.attributeValue;
    }

    public ViewTableAttributes(
        Integer                          attributeId,
        String                           attributeName,
        String                           attributeDescription,
        ViewTableAttributesAttributeType attributeType,
        String                           targetTable,
        Integer                          foreignId,
        String                           attributeValue
    ) {
        this.attributeId = attributeId;
        this.attributeName = attributeName;
        this.attributeDescription = attributeDescription;
        this.attributeType = attributeType;
        this.targetTable = targetTable;
        this.foreignId = foreignId;
        this.attributeValue = attributeValue;
    }

    public Integer getAttributeId() {
        return this.attributeId;
    }

    public void setAttributeId(Integer attributeId) {
        this.attributeId = attributeId;
    }

    public String getAttributeName() {
        return this.attributeName;
    }

    public void setAttributeName(String attributeName) {
        this.attributeName = attributeName;
    }

    public String getAttributeDescription() {
        return this.attributeDescription;
    }

    public void setAttributeDescription(String attributeDescription) {
        this.attributeDescription = attributeDescription;
    }

    public ViewTableAttributesAttributeType getAttributeType() {
        return this.attributeType;
    }

    public void setAttributeType(ViewTableAttributesAttributeType attributeType) {
        this.attributeType = attributeType;
    }

    public String getTargetTable() {
        return this.targetTable;
    }

    public void setTargetTable(String targetTable) {
        this.targetTable = targetTable;
    }

    public Integer getForeignId() {
        return this.foreignId;
    }

    public void setForeignId(Integer foreignId) {
        this.foreignId = foreignId;
    }

    public String getAttributeValue() {
        return this.attributeValue;
    }

    public void setAttributeValue(String attributeValue) {
        this.attributeValue = attributeValue;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ViewTableAttributes (");

        sb.append(attributeId);
        sb.append(", ").append(attributeName);
        sb.append(", ").append(attributeDescription);
        sb.append(", ").append(attributeType);
        sb.append(", ").append(targetTable);
        sb.append(", ").append(foreignId);
        sb.append(", ").append(attributeValue);

        sb.append(")");
        return sb.toString();
    }
// @formatter:on
}
