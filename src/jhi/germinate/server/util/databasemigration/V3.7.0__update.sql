/*
 * Copyright $today.year Information and Computational Sciences,
 * The James Hutton Institute.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

SET FOREIGN_KEY_CHECKS=0;

DROP VIEW IF EXISTS `view_mcpd`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_mcpd` AS select `g`.`id` AS `ID`,`g`.`puid` AS `PUID`,`institutions`.`code` AS `INSTCODE`,`g`.`general_identifier` AS `ACCENUMB`,`g`.`collnumb` AS `COLLNUMB`,`g`.`collcode` AS `COLLCODE`,`g`.`collname` AS `COLLNAME`,`institutions`.`address` AS `COLLINSTADDRESS`,`g`.`collmissid` AS `COLLMISSID`,`taxonomies`.`genus` AS `GENUS`,`taxonomies`.`species` AS `SPECIES`,`taxonomies`.`species_author` AS `SPAUTHOR`,`taxonomies`.`subtaxa` AS `SUBTAXA`,`taxonomies`.`subtaxa_author` AS `SUBTAUTHOR`,`taxonomies`.`cropname` AS `CROPNAME`,`g`.`number` AS `ACCENAME`,replace(`g`.`acqdate`,'-','') AS `ACQDATE`,`countries`.`country_code3` AS `ORIGCTY`,`locations`.`site_name` AS `COLLSITE`,`locations`.`latitude` AS `DECLATITUDE`,NULL AS `LATITUDE`,`locations`.`longitude` AS `DECLONGITUDE`,NULL AS `LONGITUDE`,`locations`.`coordinate_uncertainty` AS `COORDUNCERT`,`locations`.`coordinate_datum` AS `COORDDATUM`,`locations`.`georeferencing_method` AS `GEOREFMETH`,`locations`.`elevation` AS `ELEVATION`,replace(`g`.`colldate`,'-','') AS `COLLDATE`,`g`.`breeders_code` AS `BREDCODE`,`g`.`breeders_name` AS `BREDNAME`,`g`.`biologicalstatus_id` AS `SAMPSTAT`,`pedigreedefinitions`.`definition` AS `ANCEST`,`g`.`collsrc_id` AS `COLLSRC`,`g`.`donor_code` AS `DONORCODE`,`g`.`donor_name` AS `DONORNAME`,`g`.`donor_number` AS `DONORNUMB`,`g`.`othernumb` AS `OTHERNUMB`,`g`.`duplsite` AS `DUPLSITE`,`g`.`duplinstname` AS `DUPLINSTNAME`,group_concat(`storage`.`description` separator ',') AS `STORAGE`,`g`.`mlsstatus_id` AS `MLSSTAT`,(select `attributedata`.`value` from (`attributedata` left join `attributes` on((`attributes`.`id` = `attributedata`.`attribute_id`))) where ((`attributes`.`target_table` = 'germinatebase') and (`attributes`.`name` = 'Remarks') and (`attributedata`.`foreign_id` = `g`.`id`)) limit 1) AS `REMARKS`,`entitytypes`.`name` AS `Entity Type`,(select `p`.`general_identifier` from `germinatebase` `p` where (`p`.`id` = `g`.`entityparent_id`)) AS `Entity parent ACCENUMB` from (((((((((`germinatebase` `g` left join `taxonomies` on((`taxonomies`.`id` = `g`.`taxonomy_id`))) left join `locations` on((`locations`.`id` = `g`.`location_id`))) left join `countries` on((`countries`.`id` = `locations`.`country_id`))) left join `institutions` on((`institutions`.`id` = `g`.`institution_id`))) left join `pedigreedefinitions` on((`pedigreedefinitions`.`germinatebase_id` = `g`.`id`))) left join `storagedata` on((`storagedata`.`germinatebase_id` = `g`.`id`))) left join `storage` on((`storage`.`id` = `storagedata`.`storage_id`))) left join `attributedata` on((`attributedata`.`foreign_id` = `g`.`id`))) left join `entitytypes` on((`entitytypes`.`id` = `g`.`entitytype_id`))) group by `g`.`id`,`pedigreedefinitions`.`id`;

DROP VIEW IF EXISTS `view_table_germplasm`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_germplasm` AS select `germinatebase`.`id` AS `germplasm_id`,`germinatebase`.`general_identifier` AS `germplasm_gid`,`germinatebase`.`name` AS `germplasm_name`,`germinatebase`.`number` AS `germplasm_number`,`germinatebase`.`puid` AS `germplasm_puid`,`entitytypes`.`id` AS `entity_type_id`,`entitytypes`.`name` AS `entity_type_name`,`germinatebase`.`entityparent_id` AS `entity_parent_id`,`biologicalstatus`.`id` AS `biological_status_id`,`biologicalstatus`.`sampstat` AS `biological_status_name`,`synonyms`.`synonyms` AS `synonyms`,`germinatebase`.`collnumb` AS `collector_number`,`taxonomies`.`genus` AS `genus`,`taxonomies`.`species` AS `species`,`taxonomies`.`subtaxa` AS `subtaxa`,`locations`.`site_name` AS `location`,`locations`.`elevation` AS `elevation`,`countries`.`country_name` AS `country_name`,`countries`.`country_code2` AS `country_code`,`germinatebase`.`colldate` AS `coll_date`,`germinatebase`.`pdci` AS `pdci`,(select count(1) from (`images` left join `imagetypes` on((`imagetypes`.`id` = `images`.`imagetype_id`))) where ((`imagetypes`.`reference_table` = 'germinatebase') and (`images`.`foreign_id` = `germinatebase`.`id`))) AS `image_count`,(select `images`.`path` from (`images` left join `imagetypes` on((`imagetypes`.`id` = `images`.`imagetype_id`))) where ((`imagetypes`.`reference_table` = 'germinatebase') and (`images`.`foreign_id` = `germinatebase`.`id`)) limit 1) AS `first_image_path` from ((((((`germinatebase` left join `entitytypes` on((`germinatebase`.`entitytype_id` = `entitytypes`.`id`))) left join `taxonomies` on((`germinatebase`.`taxonomy_id` = `taxonomies`.`id`))) left join `locations` on((`germinatebase`.`location_id` = `locations`.`id`))) left join `countries` on((`locations`.`country_id` = `countries`.`id`))) left join `biologicalstatus` on((`biologicalstatus`.`id` = `germinatebase`.`biologicalstatus_id`))) left join `synonyms` on(((`synonyms`.`foreign_id` = `germinatebase`.`id`) and (`synonyms`.`synonymtype_id` = 1))));

DROP VIEW IF EXISTS `view_table_maps`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_maps` AS select `maps`.`id` AS `map_id`,`maps`.`name` AS `map_name`,`maps`.`description` AS `map_description`,`maps`.`user_id` AS `user_id`,`maps`.`visibility` AS `visibility`,count(1) AS `marker_count` from (`maps` left join `mapdefinitions` on((`maps`.`id` = `mapdefinitions`.`map_id`))) group by `maps`.`id`;

DROP VIEW IF EXISTS `view_table_mapdefinitions`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_mapdefinitions` AS select `markers`.`id` AS `marker_id`,`markers`.`marker_name` AS `marker_name`,`synonyms`.`synonyms` AS `synonyms`,`mapfeaturetypes`.`description` AS `map_feature_type`,`maps`.`id` AS `map_id`,`maps`.`user_id` AS `user_id`,`maps`.`visibility` AS `visibility`,`maps`.`name` AS `map_mame`,`mapdefinitions`.`chromosome` AS `chromosome`,`mapdefinitions`.`definition_start` AS `position` from ((((`markers` left join `mapdefinitions` on((`markers`.`id` = `mapdefinitions`.`marker_id`))) left join `mapfeaturetypes` on((`mapfeaturetypes`.`id` = `mapdefinitions`.`mapfeaturetype_id`))) left join `maps` on((`maps`.`id` = `mapdefinitions`.`map_id`))) left join `synonyms` on(((`synonyms`.`foreign_id` = `markers`.`id`) and (`synonyms`.`synonymtype_id` = 2))));

DROP VIEW IF EXISTS `view_table_datasets`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_datasets` AS select `datasets`.`id` AS `dataset_id`,`datasets`.`name` AS `dataset_name`,`datasets`.`description` AS `dateset_description`,`datasets`.`hyperlink` AS `hyperlink`,`experimenttypes`.`description` AS `experiment_type`,`experiments`.`description` AS `experiment_name`,`datasets`.`datatype` AS `datatype`,`datasetstates`.`name` AS `dataset_state`,`locations`.`site_name` AS `location`,`countries`.`country_code2` AS `country_code`,`countries`.`country_name` AS `country_name`,`licenses`.`id` AS `license_id`,`licenses`.`name` AS `license_name`,`datasets`.`contact` AS `contact`,`datasets`.`date_start` AS `start_date`,`datasets`.`date_end` AS `end_date`,`datasetmeta`.`nr_of_data_objects` AS `data_object_count`,`datasetmeta`.`nr_of_data_points` AS `data_point_count`,`datasets`.`is_external` AS `is_external`,concat('[',group_concat(`licenselogs`.`user_id` separator ','),']') AS `accepted_by` from ((((((((`datasets` left join `experiments` on((`experiments`.`id` = `datasets`.`experiment_id`))) left join `experimenttypes` on((`experimenttypes`.`id` = `experiments`.`experiment_type_id`))) left join `licenses` on((`licenses`.`id` = `datasets`.`license_id`))) left join `datasetmeta` on((`datasetmeta`.`dataset_id` = `datasets`.`id`))) left join `datasetstates` on((`datasetstates`.`id` = `datasets`.`dataset_state_id`))) left join `locations` on((`locations`.`id` = `datasets`.`location_id`))) left join `countries` on((`countries`.`id` = `locations`.`country_id`))) left join `licenselogs` on((`licenselogs`.`license_id` = `licenses`.`id`))) group by `datasets`.`id`,`datasetmeta`.`nr_of_data_objects`,`datasetmeta`.`nr_of_data_points`;

DROP VIEW IF EXISTS `view_table_licenses`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_licenses` AS select `licenses`.`id` AS `license_id`,`licenses`.`name` AS `license_name`,`licenses`.`description` AS `license_description`,`licensedata`.`content` AS `license_content`,`locales`.`name` AS `locale_name`,`locales`.`description` AS `locale_description` from ((`licenses` left join `licensedata` on((`licensedata`.`license_id` = `licenses`.`id`))) left join `locales` on((`locales`.`id` = `licensedata`.`locale_id`)));

DROP VIEW IF EXISTS `view_stats_overview`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_stats_overview` AS select (select count(1) from `germinatebase`) AS `germplasm`,(select count(1) from `markers`) AS `markers`,(select count(1) from `phenotypes`) AS `traits`,(select count(1) from `compounds`) AS `compounds`,(select count(1) from `locations`) AS `locations`,(select count(1) from `groups`) AS `groups`;

DROP VIEW IF EXISTS `view_table_groups`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_groups` AS select `groups`.`id` AS `group_id`,`groups`.`name` AS `group_name`,`groups`.`description` AS `group_description`,`grouptypes`.`id` AS `group_type_id`,`grouptypes`.`target_table` AS `group_type`,`groups`.`created_by` AS `user_id`,`groups`.`visibility` AS `group_visibility`,`groups`.`created_on` AS `created_on`,`groups`.`updated_on` AS `updated_on`,count(`groupmembers`.`id`) AS `count` from ((`groups` left join `grouptypes` on((`groups`.`grouptype_id` = `grouptypes`.`id`))) left join `groupmembers` on((`groupmembers`.`group_id` = `groups`.`id`))) group by `groups`.`id`;

DROP VIEW IF EXISTS `view_table_germplasm_groups`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_germplasm_groups` AS select `germinatebase`.`id` AS `germplasm_id`,`germinatebase`.`general_identifier` AS `germplasm_gid`,`germinatebase`.`name` AS `germplasm_name`,`germinatebase`.`number` AS `germplasm_number`,`germinatebase`.`puid` AS `germplasm_puid`,`entitytypes`.`id` AS `entity_type_id`,`entitytypes`.`name` AS `entity_type_name`,`germinatebase`.`entityparent_id` AS `entity_parent_id`,`biologicalstatus`.`id` AS `biological_status_id`,`biologicalstatus`.`sampstat` AS `biological_status_name`,`synonyms`.`synonyms` AS `synonyms`,`germinatebase`.`collnumb` AS `collector_number`,`taxonomies`.`genus` AS `genus`,`taxonomies`.`species` AS `species`,`taxonomies`.`subtaxa` AS `subtaxa`,`locations`.`site_name` AS `location`,`locations`.`elevation` AS `elevation`,`countries`.`country_name` AS `country_name`,`countries`.`country_code2` AS `country_code`,`germinatebase`.`colldate` AS `coll_date`,`germinatebase`.`pdci` AS `pdci`,(select count(1) from (`images` left join `imagetypes` on((`imagetypes`.`id` = `images`.`imagetype_id`))) where ((`imagetypes`.`reference_table` = 'germinatebase') and (`images`.`foreign_id` = `germinatebase`.`id`))) AS `image_count`,(select `images`.`path` from (`images` left join `imagetypes` on((`imagetypes`.`id` = `images`.`imagetype_id`))) where ((`imagetypes`.`reference_table` = 'germinatebase') and (`images`.`foreign_id` = `germinatebase`.`id`)) limit 1) AS `first_image_path`,`groupmembers`.`group_id` AS `group_id` from (((((((`germinatebase` left join `entitytypes` on((`germinatebase`.`entitytype_id` = `entitytypes`.`id`))) left join `taxonomies` on((`germinatebase`.`taxonomy_id` = `taxonomies`.`id`))) left join `locations` on((`germinatebase`.`location_id` = `locations`.`id`))) left join `countries` on((`locations`.`country_id` = `countries`.`id`))) left join `biologicalstatus` on((`biologicalstatus`.`id` = `germinatebase`.`biologicalstatus_id`))) left join `synonyms` on(((`synonyms`.`foreign_id` = `germinatebase`.`id`) and (`synonyms`.`synonymtype_id` = 1)))) left join `groupmembers` on((`groupmembers`.`foreign_id` = `germinatebase`.`id`)));

DROP VIEW IF EXISTS `view_table_markers`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_markers` AS select `markers`.`id` AS `marker_id`,`markers`.`marker_name` AS `marker_name`,`markertypes`.`description` AS `marker_type`,`synonyms`.`synonyms` AS `marker_synonyms` from ((`markers` left join `markertypes` on((`markertypes`.`id` = `markers`.`markertype_id`))) left join `synonyms` on(((`synonyms`.`foreign_id` = `markers`.`id`) and (`synonyms`.`synonymtype_id` = 2))));

DROP VIEW IF EXISTS `view_table_markers_groups`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_markers_groups` AS select `markers`.`id` AS `marker_id`,`markers`.`marker_name` AS `marker_name`,`markertypes`.`description` AS `marker_type`,`synonyms`.`synonyms` AS `marker_synonyms`,`groupmembers`.`group_id` AS `group_id` from (((`markers` left join `markertypes` on((`markertypes`.`id` = `markers`.`markertype_id`))) left join `synonyms` on(((`synonyms`.`foreign_id` = `markers`.`id`) and (`synonyms`.`synonymtype_id` = 2)))) left join `groupmembers` on((`groupmembers`.`foreign_id` = `markers`.`id`)));

DROP VIEW IF EXISTS `view_table_locations`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_locations` AS select `locations`.`id` AS `location_id`,`locations`.`site_name` AS `location_name`,`locations`.`region` AS `location_region`,`locations`.`state` AS `location_state`,`locationtypes`.`name` AS `location_type`,`locations`.`latitude` AS `location_latitude`,`locations`.`longitude` AS `location_longitude`,`locations`.`elevation` AS `location_elevation`,`countries`.`country_name` AS `country_name`,`countries`.`country_code2` AS `country_code2`,`countries`.`country_code3` AS `country_code3` from ((`locations` left join `countries` on((`countries`.`id` = `locations`.`country_id`))) left join `locationtypes` on((`locationtypes`.`id` = `locations`.`locationtype_id`)));

DROP VIEW IF EXISTS `view_table_locations_groups`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_locations_groups` AS select `locations`.`id` AS `location_id`,`locations`.`site_name` AS `location_name`,`locations`.`region` AS `location_region`,`locations`.`state` AS `location_state`,`locationtypes`.`name` AS `location_type`,`locations`.`latitude` AS `location_latitude`,`locations`.`longitude` AS `location_longitude`,`locations`.`elevation` AS `location_elevation`,`countries`.`country_name` AS `country_name`,`countries`.`country_code2` AS `country_code2`,`countries`.`country_code3` AS `country_code3`,`groupmembers`.`group_id` AS `group_id` from (((`locations` left join `countries` on((`countries`.`id` = `locations`.`country_id`))) left join `locationtypes` on((`locationtypes`.`id` = `locations`.`locationtype_id`))) left join `groupmembers` on((`groupmembers`.`foreign_id` = `locations`.`id`)));

DROP VIEW IF EXISTS `view_table_images`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_images` AS select `images`.`image_id` AS `image_id`,`images`.`image_description` AS `image_description`,`images`.`image_foreign_id` AS `image_foreign_id`,`images`.`image_path` AS `image_path`,`images`.`image_type` AS `image_type`,`images`.`image_ref_table` AS `image_ref_table`,`images`.`reference_name` AS `reference_name` from (select `images`.`id` AS `image_id`,`images`.`description` AS `image_description`,`images`.`foreign_id` AS `image_foreign_id`,`images`.`path` AS `image_path`,`imagetypes`.`description` AS `image_type`,`imagetypes`.`reference_table` AS `image_ref_table`,`germinatebase`.`name` AS `reference_name` from ((`images` left join `imagetypes` on((`imagetypes`.`id` = `images`.`imagetype_id`))) left join `germinatebase` on((`germinatebase`.`id` = `images`.`foreign_id`))) where (`imagetypes`.`reference_table` like 'germinatebase') union select `images`.`id` AS `image_id`,`images`.`description` AS `image_description`,`images`.`foreign_id` AS `image_foreign_id`,`images`.`path` AS `image_path`,`imagetypes`.`description` AS `image_type`,`imagetypes`.`reference_table` AS `image_ref_table`,`compounds`.`name` AS `reference_name` from ((`images` left join `imagetypes` on((`imagetypes`.`id` = `images`.`imagetype_id`))) left join `compounds` on((`compounds`.`id` = `images`.`foreign_id`))) where (`imagetypes`.`reference_table` like 'compounds') union select `images`.`id` AS `image_id`,`images`.`description` AS `image_description`,`images`.`foreign_id` AS `image_foreign_id`,`images`.`path` AS `image_path`,`imagetypes`.`description` AS `image_type`,`imagetypes`.`reference_table` AS `image_ref_table`,`phenotypes`.`name` AS `reference_name` from ((`images` left join `imagetypes` on((`imagetypes`.`id` = `images`.`imagetype_id`))) left join `phenotypes` on((`phenotypes`.`id` = `images`.`foreign_id`))) where (`imagetypes`.`reference_table` like 'phenotypes')) `images`;

SET FOREIGN_KEY_CHECKS=1;